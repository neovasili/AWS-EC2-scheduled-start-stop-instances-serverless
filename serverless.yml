service: aws-python3

plugins:
  - serverless-pseudo-parameters
  - serverless-python-requirements

provider:
  name: aws
  runtime: python3.7
  
  environment:
    stage: ${ self:provider.stage }
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: 
        - arn:aws:lambda:${ self:provider.region }:#{ AWS::AccountId }:function:aws-python3-${ self:provider.stage }-stop-instances
        - arn:aws:lambda:${ self:provider.region }:#{ AWS::AccountId }:function:aws-python3-${ self:provider.stage }-start-instances
    - Effect: "Allow"
      Action: 
        - "ec2:DescribeInstances"
        - "ec2:DescribeRegions"
      Resource: "*"
    - Effect: "Allow"
      Action: 
        - "ec2:StartInstances"
        - "ec2:StopInstances"
      Resource: arn:aws:ec2:*:*:instance/*

functions:
  scan-stop-instances:
    handler: functions/account-management/account-scan-stop-instances.handler
    environment:
      stop_lambda_function: aws-python3-${ self:provider.stage }-stop-instances
    timeout: 15
    events:
      - schedule: rate(30 minutes)
  scan-start-instances:
    handler: functions/account-management/account-scan-start-instances.handler
    environment:
      start_lambda_function: aws-python3-${ self:provider.stage }-start-instances
    timeout: 15
    events:
      - schedule: rate(30 minutes)
  start-instances:
    handler: functions/instances-management/start-instances.handler
  stop-instances:
    handler: functions/instances-management/stop-instances.handler


